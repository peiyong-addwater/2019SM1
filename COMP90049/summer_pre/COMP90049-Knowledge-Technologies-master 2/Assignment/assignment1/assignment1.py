'''
Date: 19/3/2017
Author: Ao Li
Work: Comp90049 Knowledge Technologies Assignmen1
Goal: Achive Approximate Matching
'''
import Levenshtein
import nltk
import soundex
import fuzzy 
from pip._vendor.html5lib._ihatexml import letter

''' Open the Files:
    f1 ---> test.txt: A list of 2K names in the Persian script, without their Latin equivalent
    f2 ---> train.txt: A list of 13K names in the Persian script, with their Latin equivalent
    f3 ---> names.txt: A list of 26K names in the Latin script (Include all of the Persian names)
'''
f1 = open('/Users/admin/Desktop/Knowledge Technology/Assignment/assignment1/2017S1-90049P1-data/test.txt')
f2 = open('/Users/admin/Desktop/Knowledge Technology/Assignment/assignment1/2017S1-90049P1-data/train.txt')
# f2 = open('/Users/admin/Desktop/Knowledge Technology/Assignment/assignment1/2017S1-90049P1-data/test2Gram1.txt')
f3 = open('/Users/admin/Desktop/Knowledge Technology/Assignment/assignment1/2017S1-90049P1-data/names.txt')
# f3 = open('/Users/admin/Desktop/Knowledge Technology/Assignment/assignment1/2017S1-90049P1-data/test2Gram.txt')
# f4 = open('/Users/admin/Desktop/Knowledge Technology/Assignment/assignment1/2017S1-90049P1-data/results_global_myself.txt','w+')
# f5 = open('/Users/admin/Desktop/Knowledge Technology/Assignment/assignment1/2017S1-90049P1-data/results_local_myself.txt','w+')
# f6 = open('/Users/admin/Desktop/Knowledge Technology/Assignment/assignment1/2017S1-90049P1-data/results_global_system.txt','w+')
# f7 = open('/Users/admin/Desktop/Knowledge Technology/Assignment/assignment1/2017S1-90049P1-data/results_N-Gram.txt','w+')
# f7 = open('/Users/admin/Desktop/Knowledge Technology/Assignment/assignment1/2017S1-90049P1-data/test2Gram2.txt','w+')
f8 = open('/Users/admin/Desktop/Knowledge Technology/Assignment/assignment1/2017S1-90049P1-data/results_100TrainedLinesMatrix.txt','w+')

# Using Global Edit Distance Method:
''' Set parameters:
# Specified parameters [m,i,d,r] in para as below
m ---> Match
i ---> Insertion
d ---> Deletion
r ---> Replace
'''
# "Normal" Distance:
para1 = [ 1,-1,-1,-1 ]
# Levenshtein Distance:
para2 = [ 0, 1, 1, 1 ]

'''
pNames: represents the list of Persian Names
lNames: represents the list of Latin Names
'''
# pNames = f2.readlines()
# lNames = f3.readlines()

# for pName in pNames:
#      
#     maxDistance = -10000
#     matchName = ""
#        
#     pName = pName.replace(pName," "+pName)
#     index = pName.find('\t')
#     pName = pName[0:index]
#     pName = pName.lower()
#  
#     for lName in lNames:
#      
#         lName = lName.replace(lName," "+lName)  
#         index = lName.find('\n')
#         lName = lName[0:index]
#          
#         #Initiate the First Row & Column in Distance Array:
#         lenP = len( pName )
#         lenL = len( lName ) 
#          
#         distanceG = [[0 for i in range(lenL) ] for i in range(lenP)]
#  
#         for i in range(0,lenL):
#             distanceG[ 0 ][ i ] = i * para1[ 2 ]
#         for i in range(0,lenP):
#             distanceG[ i ][ 0 ] = i * para1[ 1 ]
#           
#         for i in range(1,lenP):
#             for j in range(1,lenL):
#                 if pName[ i ] == lName[ j ]:
#                     distanceG[ i ][ j ] = max(
#                     distanceG[ i-1 ][ j-1 ] + para1[0],
#                     distanceG[ i-1 ][ j ] + para1[1],
#                     distanceG[ i ][ j-1 ] + para1[2]
#                     )
#                 else:
#                     x = ord( pName[i] )
#                     y = ord( lName[j] )
#                     distanceG[ i ][ j ] = max(
#                     distanceG[ i-1 ][ j-1 ] + ori_blosum62[ x ][ y ],
#                     distanceG[ i-1 ][ j ] + para1[1],
#                     distanceG[ i ][ j-1 ] + para1[2]
#                     )
#                      
#         if distanceG[ lenP-1 ][ lenL-1 ] > maxDistance:
#             maxDistance = distanceG[ lenP-1 ][ lenL-1 ]
#             matchName = lName
#              
#     matchName = matchName[1:]
#     pName = pName[1:].upper()
#     print pName+ "\t" + matchName 
#     f8.write(pName+ "\t" + matchName + "\n")
# f8.close()
# 
# Using Local Edit Distance Method self-wirte (Optional):
# for pName in pNames:
#      
#     maxDistance = 0
#     matchName = ""
#        
#     pName = pName.replace(pName," "+pName)
#     index = pName.find('\t')
#     pName = pName[0:index]
#     pName = pName.lower()
#  
#     for lName in lNames:
#      
#         lName = lName.replace(lName," "+lName)  
#         index = lName.find('\n')
#         lName = lName[0:index]
#          
#         #Initiate the First Row & Column in Distance Array:
#         lenP = len( pName )
#         lenL = len( lName ) 
#         maxDistanceTemp = 0
#         distanceG = [[0 for i in range(lenL) ] for i in range(lenP)]
#  
#         for i in range(0,lenL):
#             distanceG[ 0 ][ i ] = 0
#         for i in range(0,lenP):
#             distanceG[ i ][ 0 ] = 0
#     
#         for i in range(1,lenP):
#             for j in range(1,lenL):
#                 if pName[ i ] == lName[ j ]:
#                     distanceG[ i ][ j ] = max(
#                     distanceG[ i-1 ][ j-1 ] + para1[0],
#                     distanceG[ i-1 ][ j ] + para1[1],
#                     distanceG[ i ][ j-1 ] + para1[2],
#                     0
#                     )
#                 else:
#                     distanceG[ i ][ j ] = max(
#                     distanceG[ i-1 ][ j-1 ] + para1[3],
#                     distanceG[ i-1 ][ j ] + para1[1],
#                     distanceG[ i ][ j-1 ] + para1[2],
#                     0
#                     )
#                 if distanceG[ i ][ j ] > maxDistanceTemp:
#                     maxDistanceTemp = distanceG[ i ][ j ]  
#         
#         if maxDistanceTemp > maxDistance:
#             maxDistance = maxDistanceTemp
#             matchName = lName
#              
#     matchName = matchName[1:]
#     pName = pName[1:].upper()
#     print pName,"\t",matchName,"\t",maxDistance
#     f5.write(pName+ "\t" + matchName + "\n")
# f5.close()


# Using Global Edit Distance system method (Option)
# for pName in pNames:
#     dis = 1000000
#     matchName = ''
#      
#     index = pName.find('\t')
#     pName = pName[0:index]
#     pName = pName.lower()
# #     print pName
#     for lName in lNames:
#         index = lName.find('\n')
#         lName = lName[0:index]
#         disTemp = Levenshtein.distance(lName,pName)
#         if disTemp < dis:
#             dis = disTemp
#             matchName = lName
# #     print matchName
#     f6.write(pName+ "\t" + matchName + "\n")
# f6.close()
        
# Using N-Gram Method(Optional):
# for pName in pNames:
#     index = pName.find('\t')
#     pName = pName[0:index]
#     pName = pName.lower()
#     pName = pName.replace(pName,'#'+pName+'#')
#     pName_2gram = list( nltk.bigrams( pName ) )
#     gramDistance = 100000
#     matchName = ''
#     pLen = len(pName_2gram)
#  
#     for lName in lNames:  
#         index = lName.find('\n')
#         lName = lName[0:index]
#         lName = lName.replace(lName,'#'+lName+'#')
#         lName_2gram = list( nltk.bigrams( lName ) )
#         lLen = len(lName_2gram)
#         visit = [0 for i in range( lLen )]
#         intersectionTempNum = 0
#         for i in range( pLen ):
#             for j in range( lLen ):
#                 if pName_2gram[i] == lName_2gram[j] and visit[j] != 1:
#                     intersectionTempNum += 1
#                     visit[ j ] = 1
#         
#         gramTempDistance = pLen + lLen - 2*intersectionTempNum
#         if gramTempDistance < gramDistance:
#             gramDistance = gramTempDistance  
#             matchName = lName
#      
#     pName = pName[1:len(pName)-1]
#     matchName = matchName[1:len(matchName)-1]
#     print pName+ "\t" + matchName
#     f7.write(pName+ "\t" + matchName + "\n") 
# f7.close()

# Using Soundex(Optional):
# soundex = fuzzy.Soundex(4)
# print soundex(a)
# print soundex(b)
# soundex1 = soundex.getInstance()
# print soundex1.soundex(a)
# print soundex1.soundex(b)
# print soundex1.compare(a, b)
# print soundex1.compare(a, c)
# print soundex1.compare(b, c)
# print soundex1.compare(c, a)
# print soundex1.compare(a,d)


''' Using Other Method(Optional):
# Other1: Use improved BLOSUM62 matrix:
    Original BLOSUM62 matrix as below:
           C  S  T  P  A  G  N  D  E  Q  H  R  K  M  I  L  V  F  Y  W
        C  9 -1 -1 -3  0 -3 -3 -3 -4 -3 -3 -3 -3 -1 -1 -1 -1 -2 -2 -2
        S -1  4  1 -1  1  0  1  0  0  0 -1 -1  0 -1 -2 -2 -2 -2 -2 -3
        T -1  1  4  1 -1  1  0  1  0  0  0 -1  0 -1 -2 -2 -2 -2 -2 -3 
        P -3 -1  1  7 -1 -2 -1 -1 -1 -1 -2 -2 -1 -2 -3 -3 -2 -4 -3 -4
        A  0  1 -1 -1  4  0 -1 -2 -1 -1 -2 -1 -1 -1 -1 -1 -2 -2 -2 -3
        G -3  0  1 -2  0  6 -2 -1 -2 -2 -2 -2 -2 -3 -4 -4  0 -3 -3 -2
        N -3  1  0 -2 -2  0  6  1  0  0 -1  0  0 -2 -3 -3 -3 -3 -2 -4
        D -3  0  1 -1 -2 -1  1  6  2  0 -1 -2 -1 -3 -3 -4 -3 -3 -3 -4
        E -4  0  0 -1 -1 -2  0  2  5  2  0  0  1 -2 -3 -3 -3 -3 -2 -3
        Q -3  0  0 -1 -1 -2  0  0  2  5  0  1  1  0 -3 -2 -2 -3 -1 -2
        H -3 -1  0 -2 -2 -2  1  1  0  0  8  0 -1 -2 -3 -3 -2 -1  2 -2
        R -3 -1 -1 -2 -1 -2  0 -2  0  1  0  5  2 -1 -3 -2 -3 -3 -2 -3
        K -3  0  0 -1 -1 -2  0 -1  1  1 -1  2  5 -1 -3 -2 -3 -3 -2 -3
        M -1 -1 -1 -2 -1 -3 -2 -3 -2  0 -2 -1 -1  5  1  2 -2  0 -1 -1   
        I -1 -2 -2 -3 -1 -4 -3 -3 -3 -3 -3 -3 -3  1  4  2  1  0 -1 -3
        L -1 -2 -2 -3 -1 -4 -3 -4 -3 -2 -3 -2 -2  2  2  4  3  0 -1 -2
        V -1 -2 -2 -2  0 -3 -3 -3 -2 -2 -3 -3 -2  1  3  1  4 -1 -1 -3
        F -2 -2 -2 -4 -2 -3 -3 -3 -3 -3 -1 -3 -3  0  0  0 -1  6  3  1
        Y -2 -2 -2 -3 -2 -3 -2 -3 -2 -1  2 -2 -2 -1 -1 -1 -1  3  7  2
        W -2 -3 -3 -4 -3 -2 -4 -4 -3 -2 -2 -3 -3 -1 -3 -2 -3  1  2 11 
    
    Modified BLOSUM62 matrix as below:
           A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z
        A  4  *  0 -2 -1 -2  0 -2 -1  * -1 -1 -1 -1  * -1 -1 -1  1 -1  * -2 -3  * -2  *
        B  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 
        C  0  *  9 -3 -4 -2 -3 -3 -1  * -3 -1 -1 -3  * -3 -3 -3 -1 -1  * -1 -2  * -2  *
        D -2 -* -3  6  2 -3 -1 -1 -3  * -1 -4 -3  1  * -1  0 -2  0  1  * -3 -4  * -3  *
        E -1  * -4  2  5 -3 -2  0 -3  *  1 -3 -2  0  * -1  2  0  0  0  * -3 -3  * -2  *
        F -2  * -2 -3 -3  6 -3 -1  0  * -3  0  0 -3  * -4 -3 -3 -2 -2  * -1  1  *  3  *
        G  0  * -3 -1 -2 -3  6 -2 -4  * -2 -4 -3 -2  * -2 -2 -2  0  1  *  0 -2  * -3  *     
        H -2  * -3  1  0 -1 -2  8 -3  * -1 -3 -2  1  * -2  0  0 -1  0  * -2 -2  *  2  *
        I -1  * -1 -3 -3  0 -4 -3  4  * -3  2  1 -3  * -3 -3 -3 -2 -2  *  1 -3  * -1  *
        J  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 
        K -1  * -3 -1  1 -3 -2 -1 -3  *  5 -2 -1  0  * -1  1  2  0  0  * -3 -3  * -2  *
        L -1  * -1 -4 -3  0 -4 -3  2  * -2  4  2 -3  * -3 -2 -2 -2 -2  *  3 -2  * -1  *
        M -1  * -1 -3 -2  0 -3 -2  1  * -1  2  5 -2  * -2  0 -1 -1 -1  * -2 -1  * -1  *
        N -2  * -3  1  0 -3  0 -1 -3  *  0 -3 -2  6  * -2  0  0  1  0  * -3 -4  * -2  *
        O  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *        
        P -1  * -3 -1 -1 -4 -2 -2 -3  * -1 -3 -2 -1  *  7 -1 -2 -1  1  * -2 -4  * -3  *
        Q -1  * -3  0  2 -3 -2  0 -3  *  1 -2  0  0  * -1  5  1  0  0  * -2 -2  * -1  *
        R -1  * -3 -4  0 -3 -2  0 -3  *  2 -2 -1  0  * -2  1  5 -1 -1  * -3 -3  * -2  *
        S  1  * -1  0  0 -2  0 -1 -2  *  0 -2 -1  1  * -1  0 -1  4  1  * -2 -3  * -2  *
        T -1  * -1  1  0 -2  1  0 -2  *  0 -2 -1  0  *  1  0 -1  1  4  * -2 -3  * -2  *
        U  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   
        V  0  * -1 -3 -2 -1 -3 -3  3  * -2  1  1 -3  * -2 -2 -3 -2 -2  *  4 -3  * -1  *
        W -3  * -2 -4 -3  1 -2 -2 -3  * -3 -2 -1 -4  * -4 -2 -3 -3 -3  * -3 11  *  2  *
        X  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 
        Y -2  * -2 -3 -2  3 -3  2 -1  * -2 -1 -1 -2  * -3 -1 -2 -2 -2  * -1  2  *  7  *
        Z  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 
'''
# Initiate original blosum62 matrix:
ori_blosum62 = [[0 for col in range(26)] for row in range(26)]
ori_blosum62 = [
    [ 4, 0, 0,-2,-1,-2, 0,-2,-1, 0,-1,-1,-1,-1, 0,-1,-1,-1, 1,-1, 0,-2,-3, 0,-2, 0 ],
    [ 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    [ 0, 0, 9,-3,-4,-2,-3,-3,-1, 0,-3,-1,-1,-3, 0,-3,-3,-3,-1,-1, 0,-1,-2, 0,-2, 0 ],
    [-2, 0,-3, 6, 2,-3,-1,-1,-3, 0,-1,-4,-3, 1, 0,-1, 0,-2, 0, 1, 0,-3,-4, 0,-3, 0 ],
    [-1, 0,-4, 2, 5,-3,-2, 0,-3, 0, 1,-3,-2, 0, 0,-1, 2, 0, 0, 0, 0,-3,-3, 0,-2, 0 ],
    [-2, 0,-2,-3,-3, 6,-3,-1, 0, 0,-3, 0, 0,-3, 0,-4,-3,-3,-2,-2, 0,-1, 1, 0, 3, 0 ],
    [ 0, 0,-3,-1,-2,-3, 6,-2,-4, 0,-2,-4,-3,-2, 0,-2,-2,-2, 0, 1, 0, 0,-2, 0,-3, 0 ],   
    [-2, 0,-3, 1, 0,-1,-2, 8,-3, 0,-1,-3,-2, 1, 0,-2, 0, 0,-1, 0, 0,-2,-2, 0, 2, 0 ],
    [-1, 0,-1,-3,-3, 0,-4,-3, 4, 0,-3, 2, 1,-3, 0,-3,-3,-3,-2,-2, 0, 1,-3, 0,-1, 0 ],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
    [-1, 0,-3,-1, 1,-3,-2,-1,-3, 0, 5,-2,-1, 0, 0,-1, 1, 2, 0, 0, 0,-3,-3, 0,-2, 0 ],
    [-1, 0,-1,-4,-3, 0,-4,-3, 2, 0,-2, 4, 2,-3, 0,-3,-2,-2,-2,-2, 0, 3,-2, 0,-1, 0 ],
    [-1, 0,-1,-3,-2, 0,-3,-2, 1, 0,-1, 2, 5,-2, 0,-2, 0,-1,-1,-1, 0,-2,-1, 0,-1, 0 ],
    [-2, 0,-3, 1, 0,-3, 0,-1,-3, 0, 0,-3,-2, 6, 0,-2, 0, 0, 1, 0, 0,-3,-4, 0,-2, 0 ],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],        
    [-1, 0,-3,-1,-1,-4,-2,-2,-3, 0,-1,-3,-2,-1, 0, 7,-1,-2,-1, 1, 0,-2,-4, 0,-3, 0 ],
    [-1, 0,-3, 0, 2,-3,-2, 0,-3, 0, 1,-2, 0, 0, 0,-1, 5, 1, 0, 0, 0,-2,-2, 0,-1, 0 ],
    [-1, 0,-3,-4, 0,-3,-2, 0,-3, 0, 2,-2,-1, 0, 0,-2, 1, 5,-1,-1, 0,-3,-3, 0,-2, 0 ],
    [ 1, 0,-1, 0, 0,-2, 0,-1,-2, 0, 0,-2,-1, 1, 0,-1, 0,-1, 4, 1, 0,-2,-3, 0,-2, 0 ],
    [-1, 0,-1, 1, 0,-2, 1, 0,-2, 0, 0,-2,-1, 0, 0, 1, 0,-1, 1, 4, 0,-2,-3, 0,-2, 0 ],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0 ],   
    [ 0, 0,-1,-3,-2,-1,-3,-3, 3, 0,-2, 1, 1,-3, 0,-2,-2,-3,-2,-2, 0, 4,-3, 0,-1, 0 ],
    [-3, 0,-2,-4,-3, 1,-2,-2,-3, 0,-3,-2,-1,-4, 0,-4,-2,-3,-3,-3, 0,-3,11, 0, 2, 0 ],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0 ], 
    [-2, 0,-2,-3,-2, 3,-3, 2,-1, 0,-2,-1,-1,-2, 0,-3,-1,-2,-2,-2, 0,-1, 2, 0, 7, 0 ],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5 ], 
]
# Initiate improved matrix1 from 100 lines:
# improvedMatrix_100 = [
#     [763,   4,  3,   3, 31,  0,   2,  3,  43,  0,   1,   3,   1,   4,  82,  0, 0,   7,  47,   2,  65,  0,  2, 0, 16,  1 ],
#     [  3, 147,  0,   0,  3,  0,   0,  0,   0,  0,   0,   0,   0,   0,   1,  0, 0,   0,   1,   0,   1,  0,  1, 0,  0,  0 ],
#     [  0,   0,  2,   0,  0,  0,   0,  1,   0,  0,   0,   0,   0,   0,   0,  0, 0,   0,   0,   0,   0,  0,  0, 0,  0,  0 ],
#     [  0,   0,  0, 226,  4,  0,   1,  0,   1,  1,   0,   0,   0,   0,   0,  0, 0,   0,   0,   0,   1,  0,  0, 0,  0,  0 ],
#     [  0,   0,  0,   0,  0,  0,   0,  0,   0,  0,   0,   0,   0,   0,   0,  0, 0,   0,   0,   0,   0,  0,  0, 0,  0,  0 ],
#     [  0,   0,  0,   0,  0, 68,   0,  0,   0,  1,   0,   0,   0,   0,   0,  0, 0,   0,   0,   0,   0,  1,  0, 0,  0,  0 ],
#     [  3,   0,  0,   0,  3,  0, 142,  0,   2,  0,   0,   4,   0,   2,   0,  0, 2,   0,   0,   0,   0,  0,  0, 0,  0,  0 ],
#     [  3,   0,  0,   0, 22,  0,   0, 70,   0,  0,   0,   0,   0,   0,   0,  0, 0,   0,   0,   0,   0,  0,  0, 0,  0,  0 ],
#     [  0,   0,  0,   0,  0,  0,   0,  0,   0,  0,   0,   0,   0,   0,   0,  0, 0,   0,   0,   0,   0,  0,  0, 0,  0,  0 ],
#     [  1,   0,  0,   0,  5,  0,   7,  0,   0, 44,   0,   0,   0,   0,   0,  0, 0,   0,   0,   0,   0,  0,  0, 0,  0,  0 ],
#     [  2,   0, 79,   0,  8,  0,   0,  0,   3,  0, 173,   0,   0,   1,   2,  0, 8,   1,   0,   0,   3,  0,  2, 3,  0,  0 ],
#     [  5,   0,  0,   0, 12,  0,   0,  0,   1,  0,   0, 278,   0,   0,   1,  0, 0,   1,   0,   1,   0,  0,  0, 0,  0,  0 ],
#     [  3,   0,  0,   0,  3,  0,   0,  0,   2,  0,   0,   0, 219,   0,   0,  0, 0,   0,   0,   0,   0,  0,  0, 0,  0,  0 ],
#     [  2,   0,  1,   1, 14,  0,   8,  0,   2,  0,   0,   1,   0, 466,   2,  0, 0,   1,   1,   4,   0,  0,  0, 0,  0,  0 ],
#     [  0,   0,  0,   0,  0,  0,   0,  0,   0,  0,   0,   0,   0,   0,   0,  0, 0,   0,   0,   0,   0,  0,  0, 0,  0,  0 ],
#     [  1,   0,  0,   0,  4,  0,   0,  0,   1,  0,   0,   1,   0,   0,   0, 84, 0,   0,   0,   0,   0,  0,  0, 0,  0,  0 ], 
#     [  0,   0,  0,   0,  0,  0,   0,  0,   0,  0,   2,   0,   0,   0,   0,  0, 0,   0,   0,   0,   0,  0,  0, 0,  0,  0 ],
#     [  4,   1,  0,   0,  8,  0,   1,  0,  10,  0,   1,   0,   0,   3,   2,  0, 0, 365,   1,   0,   0,  0,  0, 0,  0,  1 ],
#     [  2,   1,  9,   0,  6,  0,   1,  0,   1,  0,   5,   5,   3,   6,   2,  4, 1,   0, 250,  26,   1,  0,  1, 4,  0,  0 ],
#     [  5,   0,  0,   0, 10,  0,   0,  4,   3,  3,   0,   0,   0,   0,   5,  0, 0,   4,   2, 202,   2,  0,  0, 0,  0,  1 ],
#     [  0,   0,  0,   0,  0,  0,   0,  0,   0,  0,   0,   0,   0,   0,   0,  0, 0,   0,   0,   0,   0,  0,  0, 0,  0,  0 ],
#     [  6,   2,  0,   1, 16,  2,   0,  0,   2,  0,   0,   6,   4,   2, 310,  1, 2,   8,   3,   2, 134, 49, 60, 2,  0,  0 ],
#     [  0,   0,  0,   0,  0,  0,   0,  0,   0,  0,   0,   0,   0,   0,   0,  0, 0,   0,   0,   0,   0,  0,  0, 0,  0,  0 ],
#     [  0,   0,  0,   0,  0,  0,   0,  0,   0,  0,   0,   0,   0,   0,   0,  0, 0,   0,   0,   0,   0,  0,  0, 0,  0,  0 ],
#     [ 22,   1,  3,   4, 80,  1,   3,  0, 447,  0,   4,   9,   1,  21,   2,  2, 0,  11,   5,  11,  18,  3,  1, 0, 98,  4 ],
#     [  4,   1,  0,   0,  2,  0,   0,  0,   0,  4,   0,   0,   0,   0,   0,  0, 0,   0,  29,   0,   0,  0,  0, 0,  0, 44 ]
# ]
# improvedMatrix_100_Modified = [
#     [ 26,  1,  1,  1,  2,  1,  1,  1,  2,  1,  1,  1,  1,  1,  4,  1,  1,  1,  3,  1,  3,  1,  1,  1,  2,  1 ],
#     [  2, 26,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1, 26,  1,  1,  1,  1, 14,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  2,  1,  1,  1,  2,  1, 26,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  2,  1,  1,  1,  9,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  2,  1,  1,  1,  4,  1,  5,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1, 12,  1,  2,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  2,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  2,  1,  2,  1,  1,  1,  1,  1,  2,  2,  1,  2,  1,  1,  1,  1, 26,  4,  1,  1,  1,  1,  1,  1 ],
#     [  2,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1,  1,  2,  1,  1, 12,  5,  6,  1,  1,  1 ],
#     [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
#     [  2,  1,  1,  1,  5,  1,  1,  1, 26,  1,  1,  2,  1,  2,  1,  1,  1,  2,  1,  2,  2,  1,  1,  1,  6,  1 ],
#     [  3,  2,  1,  1,  2,  1,  1,  1,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1, 17,  1,  1,  1,  1,  1,  1, 26 ]
# ]
# 
# improvedMatrix_300 = [
#     [ 2339,   13,   10,    5,  113,    0,    2,    8,  123,    0,    3,   17,    2,   13,  210,    2,    0,   19,  148,    4,  202,    3,    3,    0,   34,    0 ],
#     [    8,  448,    0,    0,    4,    0,    0,    0,    1,    0,    0,    0,    0,    0,    3,    0,    0,    0,    3,    0,    7,    0,    8,    0,    0,    0 ],
#     [    0,    0,    3,    0,    0,    0,    0,    8,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0 ],
#     [    1,    0,    0,  652,   19,    0,    2,    0,    1,    1,    2,    1,    0,    2,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [    0,    0,    0,    0,    0,  182,    0,    3,    3,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [    2,    0,    0,    0,    9,    0,  413,    0,    3,    0,    0,    2,    0,    1,    1,    0,    2,    2,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [    8,    0,    0,    0,   80,    0,    0,  270,    0,    0,    0,    2,    0,    0,    0,    0,    0,    1,    0,    0,    1,    0,    0,    0,    0,    0 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [    1,    0,    0,    0,   10,    0,   24,    0,    2,  150,    0,    0,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [   10,    0,  252,    0,   29,    0,    0,    0,    3,    0,  432,    3,    0,    1,    7,    0,   34,    6,    0,    0,   10,    0,    0,   11,    0,    0 ],
#     [   10,    3,    3,    3,   21,    0,    0,    0,    8,    0,    2,  822,    0,    0,    5,    0,    0,    2,    3,    9,    1,    0,    0,    0,    0,    0 ],
#     [   10,    0,    0,    0,   12,    0,    0,    0,    2,    0,    0,    0,  617,    1,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    2,    0 ],
#     [    3,    0,    0,   13,   17,    0,   15,    0,    6,    0,    3,    2,    1, 1428,    5,    0,    0,    4,    1,    8,    0,    0,    0,    0,    0,    0 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [    1,    0,    0,    0,   10,    0,    0,    0,    3,    0,    0,    5,    0,    0,    2,  227,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [    5,    5,    5,    0,   25,    0,    3,    3,   10,    0,    1,    1,    1,    2,    7,    1,    0, 1081,    1,    1,    4,    0,    0,    0,    0,    2 ],
#     [    4,    2,   67,    0,   25,    3,    0,    2,    0,    0,   18,   12,    7,    9,    6,   18,    1,    0,  779,   81,    1,    0,    0,   16,    0,    1 ],
#     [   11,    0,    1,    0,   36,    0,    1,   10,    6,   12,    0,    5,    0,    0,   12,    0,    0,   12,    1,  659,    8,    0,    0,    0,    0,    2 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [   11,    4,    2,    0,   46,    1,    0,    1,    8,    0,    1,   13,    3,    3,  935,    3,    1,   18,    7,    6,  418,  160,  186,    0,    0,    0 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [   62,   10,   17,    7,  219,    1,    4,    0, 1317,    6,    7,   31,   10,   50,    1,    4,    0,   13,   24,   23,   41,   19,    2,    0,  321,    6 ],
#     [    3,    0,    0,    0,   12,    0,    0,    0,    0,    4,    0,    0,    1,    0,    0,    0,    0,    4,   94,    0,    0,    0,    0,    3,    0,  128 ]
# ]

# improvedMatrix_500 = [
#     [ 3819,   11,   12,   17,  182,    1,    7,   12,  216,    0,    2,   19,    3,   34,  398,    2,    0,   24,  220,    2,  340,    1,    4,    0,   46,    0 ],
#     [    9,  710,    0,    0,    8,    0,    0,    0,    4,    0,    0,    2,    0,    0,    1,    0,    0,    0,    1,    0,   13,    0,    3,    0,    0,    0 ],
#     [    0,    0,    2,    0,    0,    0,    0,   15,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0 ],
#     [    0,    0,    0, 1097,   23,    0,    2,    0,    3,    1,    1,    1,    0,    2,    2,    0,    0,    2,    0,    0,    1,    0,    4,    0,    0,    0 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [    0,    0,    0,    0,    2,  285,    0,    5,    1,    0,    0,    0,    0,    0,    3,    0,    0,    0,    0,    0,    0,    3,    0,    0,    0,    0 ],
#     [    1,    2,    0,    0,   14,    0,  668,    0,    4,    0,    2,    6,    0,    4,    8,    0,    4,    3,    0,    1,    0,    0,    0,    0,    0,    0 ],
#     [   22,    0,    0,    0,  111,    0,    0,  442,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [    1,    0,    0,    0,    8,    0,   42,    0,    2,  233,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [    8,    0,  406,    0,   32,    0,    0,    0,    8,    0,  763,    3,    0,    1,   10,    0,   60,    4,    0,    0,   14,    0,    0,   16,    0,    0 ],
#     [   20,    3,    1,    0,   40,    0,    0,    0,   11,    0,    2, 1428,    0,    1,   14,    0,    0,    4,    7,    2,    2,    0,    0,    0,    0,    0 ],
#     [   16,    0,    0,    0,   17,    0,    0,    0,    4,    0,    0,    0, 1021,    2,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0 ],
#     [   16,    1,    5,   13,   47,    0,   30,    0,    9,    0,    2,    2,    4, 2215,    2,    0,    0,    5,    7,   11,    0,    0,    0,    0,    0,    0 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [    1,    0,    0,    0,   15,    0,    0,    0,    5,    0,    0,    4,    0,    0,    9,  429,    0,    2,    0,    0,    2,    0,    0,    0,    0,    0 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    5,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [   11,    2,    7,    0,   30,    0,    1,    1,   19,    0,    1,    2,    0,    7,   12,    2,    0, 1897,    3,    1,    3,    0,    0,    0,    2,    2 ],
#     [    7,    7,   95,    0,   52,    4,    1,    6,    0,    0,   19,   24,   10,    4,    5,   30,    0,    0, 1277,  122,    0,    0,    3,   28,    0,    0 ],
#     [   22,    0,    0,    0,   44,    0,    3,   14,   21,    5,    0,    3,    0,    0,   19,    0,    0,   21,    9, 1159,   10,    0,    0,    0,    0,    1 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [   24,    9,    5,    5,   56,    4,    4,    2,   11,    0,    0,   31,    7,    6, 1612,    3,    3,   30,   11,    9,  681,  275,  309,    0,    3,    2 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
#     [   83,    8,   33,   11,  398,    2,    7,    2, 2216,    4,    9,   43,   12,  104,    5,    5,    0,   14,   46,   31,   65,   28,    5,    0,  512,    6 ],
#     [    5,    2,    0,    0,   12,    0,    1,    0,    0,    6,    1,    0,    4,    0,    0,    0,    0,    2,  174,    0,    0,    0,    0,    3,    0,  230 ]
# ]
improvedMatrix_500_Modified = [
    [ 26,  1,  1,  1,  2,  1,  1,  1,  2,  1,  1,  1,  1,  1,  4,  1,  1,  1,  2,  1,  3,  1,  1,  1,  1,  1 ],
    [  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  4,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1, 26,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  2,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  2,  1,  1,  1,  7,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  2,  1,  6,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1, 14,  1,  2,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  3,  1,  1,  1,  1,  1,  1,  2,  1,  1 ],
    [  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  3,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1, 26,  3,  1,  1,  1,  2,  1,  1 ],
    [  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1, 26,  1,  1,  1,  1,  1, 12,  5,  6,  1,  1,  1 ],
    [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ],
    [  2,  1,  1,  1,  5,  1,  1,  1, 26,  1,  1,  1,  1,  2,  1,  1,  1,  1,  2,  1,  2,  1,  1,  1,  7,  1 ],
    [  2,  1,  1,  1,  2,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1, 20,  1,  1,  1,  1,  1,  1, 26 ]
]


improvedMatrix_800 = [
    [ 6074,   22,   19,   15,  293,    1,    7,   20,  369,    0,    5,   28,    8,   38,  628,    1,    0,   58,  357,   15,  517,    4,   10,    0,  109,    2 ],
    [   10, 1176,    0,    0,   18,    0,    0,    0,   10,    0,    0,    6,    0,    1,    6,    0,    0,    0,    0,    0,   16,    0,    5,    0,    0,    0 ],
    [    0,    0,    3,    0,    0,    0,    0,   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0 ],
    [    2,    0,    0, 1735,   39,    0,    2,    0,    1,    1,    0,    1,    0,    1,    4,    0,    0,    1,    0,    2,    3,    0,    3,    0,    0,    0 ],
    [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [    0,    0,    0,    0,    3,  486,    0,    7,    3,    2,    0,    0,    0,    0,    4,    0,    0,    0,    0,    0,    0,    4,    0,    0,    0,    0 ],
    [    6,    4,    0,    0,   35,    0, 1053,    0,    6,    0,    0,   24,    0,    7,    3,    0,    9,    4,    0,    2,    0,    0,    0,    0,    0,    0 ],
    [   29,    0,    0,    0,  200,    0,    0,  703,    0,    0,    0,    4,    0,    0,    0,    0,    0,    2,    0,    0,    2,    0,    0,    0,    0,    0 ],
    [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [    1,    0,    0,    0,   12,    0,   59,    0,    4,  364,    0,    0,    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [   20,    0,  656,    0,   63,    0,    0,    0,   15,    0, 1214,    5,    0,    3,   25,    0,  125,   12,    0,    0,   35,    0,    1,   40,    0,    0 ],
    [   31,    2,    1,    2,   72,    0,    0,    0,   15,    0,    2, 2118,    0,    1,   22,    0,    0,    4,   11,    4,    2,    0,    0,    0,    0,    0 ],
    [   22,    0,    0,    0,   20,    0,    0,    0,    5,    0,    0,    0, 1676,    2,    3,    4,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0 ],
    [   24,    2,    1,   10,   99,    0,   41,    0,   21,    0,    9,    3,    2, 3617,    6,    0,    0,    3,    9,   17,    0,    0,    0,    0,    0,    0 ],
    [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [   10,    0,    0,    0,   28,    0,    0,    0,    5,    0,    0,    3,    0,    0,   17,  694,    0,    5,    0,    0,    2,    0,    0,    0,    0,    0 ],
    [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,   10,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [   34,    2,   10,    0,   39,    0,    6,    8,   35,    0,    6,    6,    2,   14,   29,    4,    0, 3000,    1,    2,    8,    0,    0,    0,    4,    5 ],
    [   13,   12,  146,    0,   86,    7,    3,   10,    9,    0,   32,   34,   17,   15,    7,   63,    2,    3, 2013,  174,    2,    0,    3,   57,    0,    2 ],
    [   35,    0,    3,    0,   58,    0,    8,   20,   27,   14,    0,    2,    0,    0,   32,    0,    0,   31,   11, 1810,   15,    0,    0,    0,    0,    4 ],
    [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [   32,   14,    8,    6,   93,    2,    5,    6,   18,    0,    8,   32,    5,   30, 2620,    4,   10,   62,   21,   20, 1021,  455,  467,    1,    6,    2 ],
    [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [    0,    0,    0,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [  124,   18,   40,   34,  597,    5,   27,    1, 3431,   15,   12,   76,   17,  151,   16,    5,    0,   36,   76,   57,  108,   47,   22,    0,  857,   26 ],
    [   12,    3,    0,    0,   30,    0,    3,    0,    0,    9,    5,    0,    3,    0,    0,    0,    0,    2,  280,    0,    0,    0,    0,    6,    0,  378 ]
]

improvedMatrix_1000 = [
    [ 7595,   26,   33,   17,  347,    2,    7,   35,  482,    0,    8,   44,    8,   41,  759,    6,    0,   75,  442,   28,  663,    7,    8,    0,  106,    2 ],
    [   18, 1483,    0,    0,   21,    0,    0,    0,    4,    0,    0,    4,    0,    3,    6,    0,    0,    0,    1,    0,   19,    0,   12,    0,    0,    0 ],
    [    0,    0,   11,    0,    0,    0,    0,   27,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0 ],
    [    3,    0,    0, 2126,   62,    0,    4,    0,    2,    0,    0,    2,    0,    3,    4,    0,    0,    2,    0,    4,    1,    0,    1,    0,    0,    0 ],
    [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [    0,    0,    0,    0,    1,  610,    0,    9,    3,    1,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0,    6,    0,    0,    0,    0 ],
    [    5,    3,    0,    0,   31,    0, 1359,    0,    9,    0,    2,   11,    0,    9,    6,    0,   10,    5,    0,    3,    0,    0,    0,    0,    0,    0 ],
    [   46,    0,    0,    0,  264,    0,    0,  901,    0,    0,    0,    2,    0,    0,    0,    0,    0,    1,    0,    0,    1,    0,    0,    0,    0,    0 ],
    [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [    0,    0,    0,    0,   18,    0,   90,    0,    2,  478,    0,    0,    4,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [   23,    0,  830,    0,   81,    0,    0,    0,   18,    0, 1485,    7,    0,    5,   26,    0,  131,   16,    0,    0,   26,    0,    2,   37,    0,    0 ],
    [   41,    3,    2,    5,   75,    0,    0,    0,   20,    0,    4, 2698,    0,    4,   25,    0,    0,    3,   19,    8,    1,    3,    0,    0,    0,    0 ],
    [   40,    0,    0,    0,   36,    0,    0,    0,    9,    0,    0,    0, 2002,    2,    2,    5,    0,    0,    0,    0,    0,    0,    0,    0,    7,    0 ],
    [   18,    3,    9,   23,  134,    0,   46,    0,   23,    0,   12,    4,    8, 4662,    9,    0,    0,    4,    1,   22,    0,    0,    0,    0,    0,    0 ],
    [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [   14,    0,    0,    0,   37,    0,    0,    0,    9,    0,    0,   10,    0,    0,   10,  842,    0,    5,    0,    0,    3,    0,    0,    0,    0,    0 ],
    [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    8,    0,    0,    0,    0,    0,   10,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [   37,    5,    9,    0,   65,    0,    5,    7,   46,    0,   11,    4,    1,   12,   25,    2,    0, 3714,    2,    2,   13,    0,    0,    0,    4,    5 ],
    [   15,   12,  216,    0,   94,    4,    5,    8,   10,    0,   43,   49,   26,   14,   11,   69,    2,    4, 2590,  233,    1,    0,    2,   57,    0,    3 ],
    [   49,    0,    5,    0,  107,    0,    3,   29,   24,   20,    0,    4,    0,    0,   43,    0,    0,   42,   14, 2240,   15,    0,    0,    0,    0,    7 ],
    [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [   38,   12,    8,    2,  120,    6,    6,    9,   26,    0,    5,   59,   20,   35, 3162,   10,   10,   64,   26,   18, 1340,  557,  619,    2,    3,    4 ],
    [    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [    0,    0,    0,    0,    0,    0,    0,    4,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ],
    [  165,   22,   53,   44,  807,    3,   20,   10, 4348,   14,   19,   85,   28,  200,   21,    9,    0,   38,  110,   80,  132,   63,   17,    0, 1101,   23 ],
    [   17,    4,    0,    0,   40,    0,    5,    0,    0,   11,    6,    0,    7,    0,    0,    0,    0,    5,  341,    0,    0,    0,    0,   10,    0,  427 ]
]

# f4.close()

pNames = f2.readlines()
lNames = f3.readlines()

# ori_blosum62 = [[ ori_blosum62[ row ][ col ]+4 for col in range(26)] for row in range(26) ]
letter_empty_average = [[0 for col in range(1)] for row in range(26)]
for i in range(26):
    letter_empty_average[ i ] = ( min(improvedMatrix_500_Modified[i]) + max(improvedMatrix_500_Modified[i]))/2
                            
for pName in pNames:
     
    maxDistance = -10000
    matchName = ""
       
    pName = pName.replace(pName," "+pName)
    index = pName.find('\t')
    pName = pName[0:index]
    pName = pName.lower()
 
    for lName in lNames:
     
        lName = lName.replace(lName," "+lName)  
        index = lName.find('\n')
        lName = lName[0:index]
         
        #Initiate the First Row & Column in Distance Array:
        lenP = len( pName )
        lenL = len( lName ) 
         
        distanceG = [[0 for i in range(lenL) ] for i in range(lenP)]
        
        distanceG[ 0 ][ 0 ] = 0
        for i in range(1,lenL):
            x = ord( lName[ i ] ) - 97
            if x<0:
                x = 0
            distanceG[ 0 ][ i ] = distanceG[ 0 ][ i-1 ] - letter_empty_average[ x ]
        for i in range(1,lenP):
            x = ord( pName[i] ) - 97
            if x<0:
                x = 0
            distanceG[ i ][ 0 ] = distanceG[ i-1 ][ 0 ] - letter_empty_average[ x ]
        
        for i in range(1,lenP):
            x = ord( pName[i] ) - 97
            if x < 0:
                x = 0
            for j in range(1,lenL):
                y = ord( lName[j] ) - 97
                if y < 0:
                    y = 0
                if pName[ i ] == lName[ j ]:
                    distanceG[ i ][ j ] = max(
                    distanceG[ i-1 ][ j-1 ] + improvedMatrix_500_Modified[ y ][ x ],
                    distanceG[ i-1 ][ j ] - letter_empty_average[ x ],
                    distanceG[ i ][ j-1 ] - letter_empty_average[ y ]
                )
                else:
                    distanceG[ i ][ j ] = max(
                    distanceG[ i-1 ][ j-1 ] + improvedMatrix_500_Modified[ y ][ x ] - improvedMatrix_500_Modified[ y ][ y ],
                    distanceG[ i-1 ][ j ] - letter_empty_average[ x ],
                    distanceG[ i ][ j-1 ] - letter_empty_average[ y ]
                )
                    
        if distanceG[ lenP-1 ][ lenL-1 ] > maxDistance:
            maxDistance = distanceG[ lenP-1 ][ lenL-1 ]
            matchName = lName
             
    matchName = matchName[1:]
    pName = pName[1:].upper()
    print pName+ "\t" + matchName,maxDistance
    f8.write(pName+ "\t" + matchName + "\n")
f8.close()

# Close the Files:
f1.close()
f2.close()
f3.close()
